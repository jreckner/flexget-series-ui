import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.3.0'
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'codenarc'
apply plugin: 'maven'
apply plugin: 'project-report'

archivesBaseName = 'flexget-series-ui'
group = 'com.recknerd.flexget'
version = '1.0.7-SNAPSHOT'
description = 'FlexGet Series Config Editor'

bootRun {
    /**
     * Important: bootRun will not processResources unless addResources is set to false. See:
     * http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/build-tool-plugins-gradle-plugin.html#build-tool-plugins-gradle-running-applications
     */
    addResources = false
}

processResources {
    filesMatching("**/application.yml") {
        expand([
                name       : project.name,
                version    : project.version,
                description: project.description,
                buildDate  : new SimpleDateFormat('yyyy-MM-dd_HH-mm-ss').format(new Date()),
                commitsh   : ("git rev-parse HEAD".execute().text).trim()
        ])
    }
}


jar {
    baseName = "${archivesBaseName}"
}

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.5'

    // tag::jetty[]
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    // end::jetty[]
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    // end::actuator[]
    // tag::security[]
    compile("org.springframework.boot:spring-boot-starter-security")
    // end::security[]

    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.5.4'
    compile ('com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.7.1') {
        exclude group: 'xml-apis'
        exclude group: 'xerces'
    }
    //compile 'xerces:xercesImpl:2.11.0'

    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1') {
        exclude module: 'httpclient'
        exclude group: 'xml-apis'
        exclude group: 'xerces'
    }
    compile 'org.apache.httpcomponents:httpclient:4.3.6'

    compile 'io.springfox:springfox-swagger2:2.1.2'
    compile 'io.springfox:springfox-swagger-ui:2.1.2'

    runtime 'org.webjars:bootstrap:3.3.6'
    runtime 'org.webjars:angularjs:1.2.29'
    runtime 'org.webjars:jquery:2.1.4'
    runtime 'org.webjars:jquery-ui:1.11.4'
    runtime 'org.webjars:font-awesome:4.5.0'
    runtime 'org.webjars:ionicons:2.0.1'
    runtime 'org.webjars:angular-ui-bootstrap:1.1.1-1'
    runtime 'org.webjars:angular-growl:0.4.0'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework:spring-test'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile 'com.jayway.restassured:spring-mock-mvc:2.4.1'
    testCompile("junit:junit")
}

tasks.withType(CodeNarc) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// CodeNarc settings
codenarc {
    toolVersion = '0.24.1'
}

codenarcMain {
    enabled = true
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
    configFile = file('config/codenarc/Rules.groovy')
}

codenarcTest {
    enabled = false
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageReportDir = new File("$buildDir/reports/cobertura")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

clean {
    delete fileTree(dir: "$buildDir/reports/cobertura")
    delete 'logs/'
}

// Tells Gradle to automatically execute the cobertura task after the test task has completed.
test.finalizedBy(project.tasks.cobertura)
// Tells Gradle to automatically execute the codenarc task after the test task has completed.
test.finalizedBy(project.tasks.check)

defaultTasks 'clean', 'test', 'build'
